# ./docker-compose.yml

services:

    server:
        build:
            context: .
            dockerfile: ./automation/docker/Dockerfile
        container_name: server
        volumes:
            - ./:/var/www/html
        links:
            - mysql
        ports:
            - 80:80     

    mysql:
        image: mysql:${DB_VERSION:-8.4}
        container_name: mysql
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-toor}
            MYSQL_DATABASE: ${DB_DATABASE:-project}
            MYSQL_USER: ${DB_USER:-admin}
            MYSQL_PASSWORD: ${DB_PASSWORD:-Afpa1234}
        ports:
            - ${DB_PORT:-3306}:${DB_PORT:-3306}

    phpmyadmin:
        image: phpmyadmin:latest
        container_name: phpmyadmin
        environment:
            - PMA_HOST=${DB_HOST:-mysql}
            - PMA_USER=${DB_USER:-admin}
            - PMA_PASSWORD=${DB_PASSWORD:-Afpa1234}
        links:
            - mysql
        ports:
            - 8090:80

    mailer:
        image: schickling/mailcatcher
        container_name: mailcatcher
        ports: 
            - 1025:1025
            - 1080:1080

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# services:
#   app:
#     build:
#       context: .
#       target: final
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
